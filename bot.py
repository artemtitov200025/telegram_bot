from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from dotenv import load_dotenv
import os
import random
from PIL import Image, ImageDraw, ImageFont

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üìö –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
questions = [
    {
        "question": "–ö–∞–∫–æ–π —è–∑—ã–∫ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è Telegram-–±–æ—Ç–æ–≤?",
        "options": ["Python", "Excel", "Java", "C++"],
        "answer": "Python"
    },
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è print() –≤ Python?",
        "options": ["–ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç", "–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª", "–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å", "–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ"],
        "answer": "–ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç"
    }
]

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç: —Å–æ–∑–¥–∞—é –º–µ–º—ã –∏ –ø—Ä–æ–≤–æ–∂—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ü§ñ")

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/menu ‚Äî –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üëã")
    else:
        await update.message.reply_text(update.message.text)

# üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = [
    [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ú–µ–º", callback_data="random_meme"),
     InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –ú–µ–º", callback_data="create_meme")],
    [InlineKeyboardButton("‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz"),
     InlineKeyboardButton("üèÜ –¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤", callback_data="top")]
]
menu = InlineKeyboardMarkup(keyboard)

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "random_meme":
        await query.edit_message_text("üé≤ –ú–µ–º –±—É–¥–µ—Ç –∑–¥–µ—Å—å –ø–æ–∑–∂–µ")
    elif data == "create_meme":
        await query.edit_message_text("üñºÔ∏è –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –º–µ–º–∞")
        context.user_data["wait_for_photo"] = True
    elif data == "quiz":
        await send_quiz(update, context)  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    elif data == "top":
        await query.edit_message_text("üèÜ –¢—É—Ç –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
    elif data.startswith("answer_"):
        await check_answer(update, context, data)

# üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("wait_for_photo"):
        return

    photo = update.message.photo[-1]
    file = await photo.get_file()
    os.makedirs("temp", exist_ok=True)
    await file.download_to_drive("temp/meme.jpg")

    context.user_data["wait_for_photo"] = False
    context.user_data["wait_for_text"] = True

    await update.message.reply_text("‚úèÔ∏è –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞!")

# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–º–∞
async def handle_meme_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("wait_for_text"):
        return

    text = update.message.text
    img = Image.open("temp/meme.jpg")
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("arial.ttf", size=40)
    except:
        font = ImageFont.load_default()

    width, height = img.size
    x, y = 20, height - 60

    for dx in range(-2, 3):
        for dy in range(-2, 3):
            draw.text((x + dx, y + dy), text, font=font, fill="black")
    draw.text((x, y), text, font=font, fill="white")

    img.save("temp/final_meme.jpg")
    await update.message.reply_photo(photo=open("temp/final_meme.jpg", "rb"))

    context.user_data["wait_for_text"] = False

# ‚ùì –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    q = random.choice(questions)
    context.user_data["correct_answer"] = q["answer"]

    buttons = [
        InlineKeyboardButton(opt, callback_data=f"answer_{opt}")
        for opt in q["options"]
    ]
    markup = InlineKeyboardMarkup.from_column(buttons)

    await query.edit_message_text(q["question"], reply_markup=markup)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    query = update.callback_query
    selected = data.replace("answer_", "")
    correct = context.user_data.get("correct_answer")

    if selected == correct:
        await query.edit_message_text(f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ {correct}.")
    else:
        await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}.")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help))
app.add_handler(CommandHandler("menu", menu_handler))
app.add_handler(CallbackQueryHandler(handle_buttons))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_meme_text))
app.add_handler(MessageHandler(filters.TEXT, echo))

app.run_polling()
